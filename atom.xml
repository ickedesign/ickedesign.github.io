<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Icke&#39;s Blog</title>
  <subtitle>一个前端学习者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://icke.site/"/>
  <updated>2017-07-02T17:02:58.821Z</updated>
  <id>http://icke.site/</id>
  
  <author>
    <name>Icke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web安全-XSS的攻击和防范</title>
    <link href="http://icke.site/2017/06/11/20170611-XSS-WebSecurity/"/>
    <id>http://icke.site/2017/06/11/20170611-XSS-WebSecurity/</id>
    <published>2017-06-11T12:00:03.000Z</published>
    <updated>2017-07-02T17:02:58.821Z</updated>
    
    <content type="html"><![CDATA[<p>总结包含以下内容：了解XSS的攻击方式和防范措施，并进行实战</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/XSS-WebSecurity.png" alt="XSS-WebSecurity" title="">
                </div>
                <div class="image-caption">XSS-WebSecurity</div>
            </figure>
<hr>
<a id="more"></a>
<h3 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h3><ul>
<li><p><strong>简介</strong></p>
<p> 跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者通常往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的, 还有另外一种产常见的就是CSRF(Cross-site request forgery)跨站点请求伪造。</p>
</li>
</ul>
<ul>
<li><p><strong>主要分类</strong></p>
<ul>
<li>反射型：发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析响应之后，XSS代码随着响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。</li>
<li>存储型：存储型XSS和反射型XSS的差别在于,提交的代码会存储在服务器中(例如数据库,内存,文件系统等),下次请求页面时不用再提交XSS代码。</li>
</ul>
</li>
<li><p><strong>特点</strong> </p>
<p>  1.耗时间<br>  2.有一定几率不成功<br>  3.没有响应的软件自动攻击<br>  4.需要有一定的语言基础<br>  5.这是一种被动的攻击手法<br>  6.几乎所有的网站都存在Xss 谷歌，百度，QQ都有</p>
</li>
<li><p><strong>其它的攻击</strong></p>
<ul>
<li><strong>DoS</strong>(Denial of Service)拒绝服务攻击、<strong>DDoS</strong>(Distributed Denial of Service)分布式拒绝服务攻击<ul>
<li>这两种攻击方式利用目标系统网络服务功能缺陷或者直接消耗其系统资源，使得该目标系统无法提供正常的服务。单一的DoS攻击一般是采用一对一方式的，而DDoS利用更多的傀儡机（肉鸡）来发起进攻，以比从前更大的规模来进攻受害者。</li>
</ul>
</li>
<li><strong>Server Limit DOS</strong>服务器限制拒绝服务攻击<ul>
<li>比如：  攻击导致http request header过长而导致web server产生404或者4开头的一个错误。如果浏览器中这些数据保存在cookies中，会导致用户无法正常访问域名或者这个站点</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="XSS的反射型攻击演示"><a href="#XSS的反射型攻击演示" class="headerlink" title="XSS的反射型攻击演示"></a>XSS的反射型攻击演示</h3><p><em>构建Node服务进行演示</em></p>
<ul>
<li><p>1.新建文件夹，命令行输入：</p>
<ul>
<li><code>express -e ./</code>使用express脚手架，用ejs作为模板引擎，在当前目录执行</li>
<li><code>npm install</code>安装依赖</li>
</ul>
</li>
<li><p>2.在<em>routes/index.js</em>下设置路由：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">	res.set(<span class="string">'X-XSS-Protection'</span>,<span class="number">0</span>);	<span class="comment">//关掉浏览器对XSS的检测</span></div><div class="line">	res.render(<span class="string">'index'</span>,&#123; <span class="attr">title</span>:<span class="string">'Express'</span>,<span class="attr">xss</span>:req.query.xss &#125;);	</div><div class="line">&#125;);	<span class="comment">//query是express获取search的字段</span></div></pre></td></tr></table></figure>
</li>
<li><p>3.在<em>views/index.ejs</em>中的body部分添加：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;&quot;&gt;</div><div class="line">	&lt;%- xss %&gt;&lt;!--&apos;-&apos;表示允许输入html，不需要转义--&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>4.命令行输入：</p>
<p>   <code>npm start</code>开启服务器</p>
</li>
<li><p>5.在<code>http://localhost:3000/</code>后输入<code>?xss=&lt;iframe src=&quot;//baidu.com/h.html&quot;&gt;&lt;/iframe&gt;</code>或者<code>?xss=&lt;img src=&quot;null&quot; onerror=&quot;alert(&quot;1&quot;)&quot;&gt;</code>或者<code>&gt;xss=&lt;p onclick=&quot;alert(&quot;1&quot;)&quot;&gt;点我&lt;/p&gt;</code>进行模仿XSS的放射型攻击。第一个效果如下图：</p>
<p>  <img src="/img/XSS-WebSecurity-test1.png" alt="XSS-WebSecurity"></p>
</li>
</ul>
<h3 id="XSS的防范措施"><a href="#XSS的防范措施" class="headerlink" title="XSS的防范措施"></a>XSS的防范措施</h3><p><em>XSS不止是URL注入 ，或者评论代码注入，还有cookie 劫持等多种形式</em></p>
<p>对于<em>评论代码注入</em>的<strong>三大步骤：</strong></p>
<ul>
<li>编码：对用户输入的数据进行HTML Entity编码，比如字符<code>&quot;</code>转义成转义字符<code>&amp;quot</code></li>
<li>过滤：移除用户上传的DOM属性，如<code>onerror</code>等，还有用户上传的<code>Style</code>节点、<code>Script</code>节点，<code>Iframe</code>节点，<code>frame</code>节点等</li>
<li>校正：避免直接对HTML Entity解码；使用DOM Parse转换，校正不配对的DOM标签（DOM Parse指将字符串或文本解析成DOM结构）</li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><em>通过构建Node服务和建立一个评论功能，使用ajax实例演示XSS的攻击和预防</em></p>
<ul>
<li>文本由服务器端转义，客户端反转义，再DomParse，再过滤</li>
<li>使用encode.js和domparse.js第三方库对文本进行解码和DOM parse操作</li>
<li>详见本人Github的两个文件<a href="https://github.com/ickedesign/XSS_WebSecurity/blob/master/routes/index.js" target="_blank" rel="external">routes/index.js</a>和<a href="https://github.com/ickedesign/XSS_WebSecurity/blob/master/views/index.ejs" target="_blank" rel="external">views/index.ejs</a>，内含注释</li>
</ul>
<p>效果图如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/XSS-WebSecurity-test2.png" alt="XSS-WebSecurity-test2" title="">
                </div>
                <div class="image-caption">XSS-WebSecurity-test2</div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结包含以下内容：了解XSS的攻击方式和防范措施，并进行实战&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;/img/XSS-WebSecurity.png&quot; alt=&quot;XSS-WebSecurity&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;XSS-WebSecurity&lt;/div&gt;
            &lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="XSS" scheme="http://icke.site/tags/XSS/"/>
    
  </entry>
  
</feed>
